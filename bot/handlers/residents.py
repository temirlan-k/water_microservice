from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from repo.database import db
from telegram.ext import ConversationHandler

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
def is_valid_number(text):
    try:
        num = int(text)
        return num >= 0  # –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    except ValueError:
        return False

async def update_residents(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë™ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö:")
    return "ADULTS"

async def get_adults(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_valid_number(update.message.text):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö.")
        return "ADULTS"

    context.user_data['adults'] = int(update.message.text)
    await update.message.reply_text("üßí –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:")
    return "CHILDREN"

async def get_children(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_valid_number(update.message.text):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–µ—Ç–µ–π.")
        return "CHILDREN"

    context.user_data['children'] = int(update.message.text)
    await update.message.reply_text("üè° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤:")
    return "RENTERS"

async def get_renters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_valid_number(update.message.text):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤.")
        return "RENTERS"

    renters = int(update.message.text)
    user_id = update.effective_user.id
    await db.update_residents(
        user_id,
        context.user_data['adults'],
        context.user_data['children'],
        renters
    )
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.")
    return ConversationHandler.END

def get_conv_handler():
    return ConversationHandler(
        entry_points=[CommandHandler('update_residents', update_residents)],
        states={
            "ADULTS": [MessageHandler(filters.TEXT, get_adults)],
            "CHILDREN": [MessageHandler(filters.TEXT, get_children)],
            "RENTERS": [MessageHandler(filters.TEXT, get_renters)]
        },
        fallbacks=[]
    )
