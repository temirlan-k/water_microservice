from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, ConversationHandler, MessageHandler, filters
REGISTER_IIN, REGISTER_ADDRESS, REGISTER_PHONE, VERIFY_CODE = range(4)
from repo.database import db

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ò–ù:")
    return REGISTER_IIN

async def register_iin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['iin'] = update.message.text
    await update.message.reply_text("üè† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (—É–ª. –î–æ–º.–∫–≤):")
    return REGISTER_ADDRESS

async def register_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text
    await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return REGISTER_PHONE

async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ú–æ–∫ SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ 1234
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS (—Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥: 1234):")
    return VERIFY_CODE

async def verify_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.message.text == "1234":
        user_id = update.effective_user.id

        user_exists = await db.user_exists(user_id)

        if user_exists:
            await db.update_user(
                user_id,
                context.user_data['iin'],
                context.user_data['address'],
                context.user_data['phone']
            )
            await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        else:
            await db.add_user(
                user_id,
                context.user_data['iin'],
                context.user_data['address'],
                context.user_data['phone']
            )
            await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return VERIFY_CODE

def get_conv_handler():
    return ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTER_IIN: [MessageHandler(filters.TEXT, register_iin)],
            REGISTER_ADDRESS: [MessageHandler(filters.TEXT, register_address)],
            REGISTER_PHONE: [MessageHandler(filters.TEXT, register_phone)],
            VERIFY_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, verify_code)],
        },
        fallbacks=[],
    )